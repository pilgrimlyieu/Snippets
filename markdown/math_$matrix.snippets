global !p

from mdtex.scopes import math, inline_math, display_math

default_row    = 2
default_column = 2

def get_content(text):
	return text[1:-2 if text[-1] == '.' else -1]

endglobal

# 矩阵片段
## 格式（?xxx? 代表 xxx 可省略）
### `option` + mm + ?`size`? + ?\`content`\.? + ?%`command`?
## 参数
### `option` {{{1
#### 'm': 无边框矩阵
#### 'p': 小括号边框矩阵
#### 'b': 中括号边框矩阵
#### 'B': 大括号边框矩阵
#### 'v': 行列式
#### 'V': 范数
## }}}1
### `size` {{{1
#### m×n 为 m 行 n 列
#### 默认 2×2 
#### 'n'  n×n
#### 'mn' m×n
## }}}1
### `content` {{{1
#### 预填充内容
#### 内容包含空格时需增加 '.' 明确内容结束
#### 保留关键词
##### '$': 作为行数字递推关系占位符（最多 10 个）
##### '#': 作为列数字递推关系占位符（最多 10 个）
##### '@': 作为全局数字递推关系占位符（最多 10 个）
## }}}1
### `command` {{{1
#### 指令
##### 或许可指定递推数字的起始数字与间隔数字
##### 内置命令缩写以便快捷输入矩阵
##### 以 '|' 为命令， ';' 为参数分界符
## }}}1

context "math()"
snippet mat "矩阵格式" w
${1|b,v,p,V,B,m|}mm$2\\$3\\.%$0
endsnippet

priority 1
context "math()"
snippet "(?a)\b([mpbBvV]mm\d)" "优化矩阵 Matrix Tip" Ar
`!p snip.rv = match.group(1)`
endsnippet

context "display_math()"
snippet "(?a)\b([mpbBvV])mm(\d{,2})((?:\\\S*\\|\\.*\\\.)?)((?:%[a-zA-Z\d|;$@#]*)?)" "行间矩阵 Display Matrix" r
endsnippet

# ?xxx? 代表 xxx 可省略
## 指令 {{{1
### $ + ?`order`? + ?;`start`? + ?;`step`? {{{2
#### 表示第 `order` 个 $ 代表的数字的有关行线性递推关系
#### 如 `content` 为 "a_{$ 1}"，`command` 可为 "$;2;2" 来表示一定线性递推的编码，如对 2×2 矩阵结果为 a_{21} a_{21} a_{41} a_{41}
#### 默认为 "$0;1;1"
### }}}2,
### # + ?`order`? + ?;`start`? + ?;`step`? {{{2
#### 表示第 `order` 个 # 代表的数字的有关列线性递推关系
#### 如 `content` 为 "a_{$#}"，`command` 可为 "$|#" 来表示一定线性递推的编码，如对 2×2 矩阵结果为 a_{21} a_{22} a_{21} a_{22}
#### 默认为 "#0;1;1"
### }}}2
### @ + ?`order`? + ?;`start`? + ?;`step`? + ?;`reverse`? {{{2
#### 表示第 `order` 个 @ 代表的数字的有关位置线性递推关系
#### 如 `content` 为 "a_{@}"，`command` 可为 "@;8;3" 来表示一定线性递推的编码，如对 2×2 矩阵结果为 a_{8} a_{21} a_{24} a_{27}
#### 默认为 "@0;1;1;0"
### }}}2
## }}}1
## 编码 {{{1
### a
#### 表示单位矩阵
### b + ?`variable`? + ?`rowsubscript`? + ?`columnsubscript`?
#### 表示一般矩阵
#### 默认为 "ba;m;n"
### c + ?`start`? + ?;`step`?
#### 表示对角矩阵
#### 默认为 "c"
### d
#### 旋转矩阵（二维）
## }}}1
